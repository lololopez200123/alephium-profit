import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  BadRequestException,
  UseGuards,
  Delete,
  Req,
  HttpException,
} from '@nestjs/common';
import { UserService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { User } from './models/user.model';
import { Types } from 'mongoose';
import { RolesGuard } from 'src/guards/roles-guard.guard';
import { AdminAccess } from 'src/decorators/admin.decorator';
import { JwtAuthGuard } from 'src/guards/jwt-guard.guard';
import { RequestWithUser } from './interfaces/user.interface';
import { AlephiumWalletService } from 'src/alephium-wallet/alephium-wallet.service';

@UseGuards(JwtAuthGuard, RolesGuard)
@Controller('users')
export class UserController {
  constructor(
    private readonly userService: UserService,
    private readonly alephiumWalletService: AlephiumWalletService,
  ) {}

  @AdminAccess()
  @Post()
  async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {
    return this.userService.createUser(createUserDto);
  }

  @AdminAccess()
  @Get()
  async findAllUsers(): Promise<User[]> {
    return this.userService.findAllUsers();
  }

  @AdminAccess()
  @Get(':id')
  async findUserByAdress(@Param('adress') address: string): Promise<User> {
    if (!Types.ObjectId.isValid(address)) {
      throw new BadRequestException('Invalid ID!');
    }
    return this.userService.findUserByAddress(address);
  }

  @Get('my-info')
  async getMyUserInfo(@Req() req: RequestWithUser): Promise<User> {
    try {
      const myId = req.user._id;
      // veo si el usuario tiene un ANS con su address --> !!name
      const nameANS = await this.alephiumWalletService.getANSFromAddress(
        req.user.address,
      );

      const isLinked = await this.alephiumWalletService.verifyNameANS(
        nameANS,
        req.user.address,
      );

      const isNameANS = isLinked;
      // -- si es true lo comparo con la db y si es igual devuelvo la info como esta, si no, lo actualizo y name actual a nameAutoGenerated de la db y isAnsSeted a true.
      const userLogged = await this.userService.findById(myId);
      if (isNameANS) {
        if (nameANS !== userLogged.name) {
          return await this.userService.updateSomeProperties(myId, {
            name: nameANS,
            isAnsSeted: true,
          });
        }
      } else {
        // -- si isAnsSeted es true me fijo en la db y si lo tiene asignado, lo reemplazo por el nameAutoGenerated de la db y actualo isAnsSeted a false.
        if (userLogged.isAnsSeted) {
          return await this.userService.updateSomeProperties(myId, {
            name: 'user',
            isAnsSeted: false,
          });
        }
        // si isAnsSeted es false devuelvo la info como esta
        return userLogged;
      }
      return userLogged;
    } catch (error) {
      throw new HttpException(error, 500);
    }
  }

  @Post('favorite-coin')
  async addFavoriteCoin(
    @Req() req: RequestWithUser,
    @Body('coin') coin: string,
  ) {
    const address = req.user['address']; // Asegúrate de que 'address' está disponible en req.user
    if (!coin) {
      throw new BadRequestException('Se requiere el nombre de la moneda');
    }
    await this.userService.addFavoriteCoin(address, coin);
    return { message: 'Moneda añadida a favoritos' };
  }

  @Delete('favorite-coin')
  async removeFavoriteCoin(
    @Req() req: RequestWithUser,
    @Body('coin') coin: string,
  ) {
    const address = req.user['address'];
    if (!coin) {
      throw new BadRequestException('Se requiere el nombre de la moneda');
    }
    await this.userService.removeFavoriteCoin(address, coin);
    return { message: 'Moneda eliminada de favoritos' };
  }

  @Get('favorite-coins')
  async getFavoriteCoins(@Req() req: RequestWithUser) {
    const address = req.user['address'];
    const favoriteCoins = await this.userService.getFavoriteCoins(address);
    return { favoriteCoins };
  }
}
